{"ast":null,"code":"import React, { useState } from \"react\";\nconst baseURL = `http://lookup-service-prod.mlb.com/json/named.search_player_all.bam?sport_code='mlb'&active_sw='Y'`;\n\n// /json/named.player_info.bam?sport_code='mlb'&player_id={player_id}\n\n// &name_part='${encoded}%25'\n\nexport const playerNameSearchAutoComplete = async value => {\n  try {\n    // encode URI removes spaces and the like from our search bar\n    const encoded = encodeURIComponent(value);\n    const fetching = await fetch(`${baseURL}&name_part='${encoded}%25'`);\n    const playerSearch = await fetching.json();\n    // console.log('calling up... ', playerSearch)\n    const newPlayerName = playerSearch.search_player_all.queryResults.row;\n    console.log('calling up... ', newPlayerName);\n\n    // if (newPlayerName.typeOf() == array) {\n    //     return newPlayerName\n    // } else {\n    //     return newPlayerName\n    // }\n\n    return newPlayerName;\n  } catch (error) {\n    console.error('there was an error searching: ', error);\n  }\n};\nexport const getIndividualPlayer = async playerId => {\n  const response = await fetch(`http://lookup-service-prod.mlb.com/json/named.player_info.bam?sport_code='mlb'&player_id=${playerId}`).then(result => result.json());\n  // console.log('response in api fetch: ', response)\n  return response.player_info.queryResults.row;\n};\nexport const getIndividualSeasonStats = async (playerId, season) => {\n  const response = await fetch(`json/named.sport_hitting_tm.bam?league_list_id='mlb'&game_type={game_type}&season={season}&player_id={player_id}`);\n};\nexport const getPlayerHittingStats = async playerId => {\n  try {\n    const response = await fetch(`http://lookup-service-prod.mlb.com/json/named.sport_career_hitting.bam?league_list_id='mlb'&game_type='R'&player_id=${playerId}`).then(result => result.json());\n    console.log('hitting stats in api', response.sport_career_hitting.queryResults.row);\n    return response.sport_career_hitting.queryResults.row;\n  } catch (error) {\n    console.log('There was an error getting batting stats: ', error);\n  }\n};\nexport const getIndividualPitchingStats = async playerId => {\n  try {\n    const response = await fetch(`http://lookup-service-prod.mlb.com//json/named.sport_career_pitching.bam?league_list_id='mlb'&game_type='R'&player_id=${playerId}`).then(result => result.json());\n    // console.log('pitching api response', response.sport_career_pitching.queryResults.row)\n    return response.sport_career_pitching.queryResults.row;\n  } catch (error) {\n    console.error('there was a problem getting pitching stats: ', error);\n  }\n};\nexport const getPlayersByPosition = async positionId => {\n  try {\n    const response = await fetch(`http://lookup-service-prod.mlb.com/json/named.search_player_all.bam?sport_code='mlb'&active_sw='Y'&name_part='${positionId}%25'`).then(result => result.json());\n    const playersByPosition = response.search_player_all.queryResults.row;\n    console.log('playersByPosition', playersByPosition);\n\n    // map through players and return ones who match the searched position Id\n    const playerArray = [];\n    playersByPosition.map(eachplayer => {\n      if (eachplayer.position.toLowerCase() === positionId) {\n        playerArray.push(eachplayer);\n      }\n    });\n    console.log('playerArray in api', playerArray);\n    return playerArray;\n  } catch (error) {\n    console.log('there was a problem fetching position players: ', error);\n  }\n};","map":{"version":3,"names":["React","useState","baseURL","playerNameSearchAutoComplete","value","encoded","encodeURIComponent","fetching","fetch","playerSearch","json","newPlayerName","search_player_all","queryResults","row","console","log","error","getIndividualPlayer","playerId","response","then","result","player_info","getIndividualSeasonStats","season","getPlayerHittingStats","sport_career_hitting","getIndividualPitchingStats","sport_career_pitching","getPlayersByPosition","positionId","playersByPosition","playerArray","map","eachplayer","position","toLowerCase","push"],"sources":["/Users/marcus/Documents/fullstack/baseball-React/src/api.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nconst baseURL = `http://lookup-service-prod.mlb.com/json/named.search_player_all.bam?sport_code='mlb'&active_sw='Y'`\n\n// /json/named.player_info.bam?sport_code='mlb'&player_id={player_id}\n\n\n\n// &name_part='${encoded}%25'\n\nexport const playerNameSearchAutoComplete = async (value) => {\n\n    try{\n        // encode URI removes spaces and the like from our search bar\n        const encoded = encodeURIComponent(value)\n\n        const fetching = await fetch(`${baseURL}&name_part='${encoded}%25'`)\n        const playerSearch = await fetching.json();\n        // console.log('calling up... ', playerSearch)\n        const newPlayerName = playerSearch.search_player_all.queryResults.row\n        console.log('calling up... ', newPlayerName)\n\n        // if (newPlayerName.typeOf() == array) {\n        //     return newPlayerName\n        // } else {\n        //     return newPlayerName\n        // }\n\n        return newPlayerName;\n\n    } catch (error) {\n        console.error('there was an error searching: ', error)\n    }\n}\n\nexport const getIndividualPlayer = async (playerId) => {\n    const response = await fetch(`http://lookup-service-prod.mlb.com/json/named.player_info.bam?sport_code='mlb'&player_id=${playerId}`).then(result => result.json())\n    // console.log('response in api fetch: ', response)\n    return response.player_info.queryResults.row\n\n}\n\nexport const getIndividualSeasonStats = async (playerId, season) => {\n    const response = await fetch(`json/named.sport_hitting_tm.bam?league_list_id='mlb'&game_type={game_type}&season={season}&player_id={player_id}`)\n}\n\nexport const getPlayerHittingStats = async (playerId) => {\n    try {\n        const response = await fetch(`http://lookup-service-prod.mlb.com/json/named.sport_career_hitting.bam?league_list_id='mlb'&game_type='R'&player_id=${playerId}`).then(result => result.json())\n\n        console.log('hitting stats in api', response.sport_career_hitting.queryResults.row)\n    \n        return response.sport_career_hitting.queryResults.row;\n    } catch (error) {\n        console.log('There was an error getting batting stats: ', error)\n    }\n\n}\n\nexport const getIndividualPitchingStats = async (playerId) => {\n    try {\n        const response = await fetch(`http://lookup-service-prod.mlb.com//json/named.sport_career_pitching.bam?league_list_id='mlb'&game_type='R'&player_id=${playerId}`).then(result => result.json())\n        // console.log('pitching api response', response.sport_career_pitching.queryResults.row)\n        return response.sport_career_pitching.queryResults.row\n    } catch (error) {\n        console.error('there was a problem getting pitching stats: ', error)\n    }\n}\n\nexport const getPlayersByPosition = async (positionId) => {\n    try {\n        const response = await fetch(`http://lookup-service-prod.mlb.com/json/named.search_player_all.bam?sport_code='mlb'&active_sw='Y'&name_part='${positionId}%25'`)\n        .then(result => result.json());\n        const playersByPosition = response.search_player_all.queryResults.row;\n        console.log('playersByPosition', playersByPosition)\n\n        // map through players and return ones who match the searched position Id\n        const playerArray = []\n        playersByPosition.map((eachplayer) => {\n            if (eachplayer.position.toLowerCase() === positionId) {\n                playerArray.push(eachplayer)\n            }\n        })\n        console.log('playerArray in api', playerArray)\n        return playerArray;\n    } catch (error) {\n        console.log('there was a problem fetching position players: ', error)\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}